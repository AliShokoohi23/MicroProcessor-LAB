;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : eXERCISE nO 4
;Version : 1.0
;Date    : 3/5/2024
;Author  : MASHHOUN
;Company : IUST
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;unsigned char a = 1;
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 001D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001E // Place your code here
; 0000 001F      a = a << 1;
;PCODE: $0000000F VOL: 0
; 0000 0020      if(a==0) a=1;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0021 }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;
;void main(void)
; 0000 0024 {
;PCODE: $00000018 VOL: 0
; 0000 0025 // Declare your local variables here
; 0000 0026 
; 0000 0027 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0028 // Clock source: System Clock
; 0000 0029 // Clock value: 31.250 kHz
; 0000 002A // Mode: CTC top=OCR1A
; 0000 002B // OC1A output: Disconnected
; 0000 002C // OC1B output: Disconnected
; 0000 002D // Noise Canceler: Off
; 0000 002E // Input Capture on Falling Edge
; 0000 002F // Timer Period: 1 s
; 0000 0030 // Timer1 Overflow Interrupt: Off
; 0000 0031 // Input Capture Interrupt: Off
; 0000 0032 // Compare A Match Interrupt: On
; 0000 0033 // Compare B Match Interrupt: Off
; 0000 0034 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0035 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0036 TCNT1H=0x00;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0037 TCNT1L=0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0038 ICR1H=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0039 ICR1L=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 003A OCR1AH=0x7A;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 003B OCR1AL=0x12;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003C OCR1BH=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003D OCR1BL=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 003E 
; 0000 003F // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0040 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0041 
; 0000 0042 // Global enable interrupts
; 0000 0043 #asm("sei")
;PCODE: $00000031 VOL: 0
	sei
;PCODE: $00000032 VOL: 0
; 0000 0044 
; 0000 0045 while (1)
;PCODE: $00000033 VOL: 0
; 0000 0046       {
; 0000 0047       // Place your code here
; 0000 0048       PORTB = a;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0049       }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 004A }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
