
AVRASM ver. 2.1.30  E:\University\Term 6\Micro\final-exam\Debug\List\final-exam.asm Tue Jun 11 17:53:55 2024

E:\University\Term 6\Micro\final-exam\Debug\List\final-exam.asm(1083): warning: Register r4 already defined by the .DEF directive
E:\University\Term 6\Micro\final-exam\Debug\List\final-exam.asm(1084): warning: Register r5 already defined by the .DEF directive
E:\University\Term 6\Micro\final-exam\Debug\List\final-exam.asm(1085): warning: Register r6 already defined by the .DEF directive
E:\University\Term 6\Micro\final-exam\Debug\List\final-exam.asm(1086): warning: Register r7 already defined by the .DEF directive
E:\University\Term 6\Micro\final-exam\Debug\List\final-exam.asm(1087): warning: Register r8 already defined by the .DEF directive
E:\University\Term 6\Micro\final-exam\Debug\List\final-exam.asm(1088): warning: Register r9 already defined by the .DEF directive
E:\University\Term 6\Micro\final-exam\Debug\List\final-exam.asm(1089): warning: Register r10 already defined by the .DEF directive
E:\University\Term 6\Micro\final-exam\Debug\List\final-exam.asm(1090): warning: Register r11 already defined by the .DEF directive
E:\University\Term 6\Micro\final-exam\Debug\List\final-exam.asm(1091): warning: Register r12 already defined by the .DEF directive
E:\University\Term 6\Micro\final-exam\Debug\List\final-exam.asm(1092): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _left_number=R4
                 	.DEF _left_number_msb=R5
                 	.DEF _right_number=R6
                 	.DEF _right_number_msb=R7
                 	.DEF _index=R8
                 	.DEF _index_msb=R9
                 	.DEF _toggle=R10
                 	.DEF _toggle_msb=R11
                 	.DEF _highest=R12
                 	.DEF _highest_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0068 	JMP  _timer1_compa_isr
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0080 	JMP  _timer0_comp_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _segments:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f
00002f 7c77
000030 5e39
000031 7179      	.DB  0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000032 0000
000033 0000      	.DB  0x0,0x0,0x0,0x0
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 270f      	.DB  0xF,0x27
                 
                 
                 __GLOBAL_INI_TBL:
000037 000a      	.DW  0x0A
000038 0004      	.DW  0x04
000039 0064      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00003a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003b 94f8      	CLI
00003c 27ee      	CLR  R30
00003d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003e e0f1      	LDI  R31,1
00003f bffb      	OUT  GICR,R31
000040 bfeb      	OUT  GICR,R30
000041 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000042 e08d      	LDI  R24,(14-2)+1
000043 e0a2      	LDI  R26,2
000044 27bb      	CLR  R27
                 __CLEAR_REG:
000045 93ed      	ST   X+,R30
000046 958a      	DEC  R24
000047 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000048 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000049 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004b 93ed      	ST   X+,R30
00004c 9701      	SBIW R24,1
00004d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004e e6ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000050 9185      	LPM  R24,Z+
000051 9195      	LPM  R25,Z+
000052 9700      	SBIW R24,0
000053 f061      	BREQ __GLOBAL_INI_END
000054 91a5      	LPM  R26,Z+
000055 91b5      	LPM  R27,Z+
000056 9005      	LPM  R0,Z+
000057 9015      	LPM  R1,Z+
000058 01bf      	MOVW R22,R30
000059 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005a 9005      	LPM  R0,Z+
00005b 920d      	ST   X+,R0
00005c 9701      	SBIW R24,1
00005d f7e1      	BRNE __GLOBAL_INI_LOOP
00005e 01fb      	MOVW R30,R22
00005f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000060 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000061 bfed      	OUT  SPL,R30
000062 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000063 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000064 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000065 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000066 940c 0095 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;int left_number = 0, right_number = 0, index = 0, toggle = 0, highest = 9999, lo ...
                 ;int leftDigits[4], rightDigits[4];
                 ;int divisor, digitIndex;
                 ;const char segments[] = { 0x3F, 0x06, 0x5B, 0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,  ...
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 0020 {
                 
                 	.CSEG
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
000068 93ea      	ST   -Y,R30
000069 93fa      	ST   -Y,R31
00006a b7ef      	IN   R30,SREG
00006b 93ea      	ST   -Y,R30
                 ; 0000 0021 right_number++;
00006c 01f3      	MOVW R30,R6
00006d 9631      	ADIW R30,1
00006e 013f      	MOVW R6,R30
                 ; 0000 0022 
                 ; 0000 0023 if (toggle != 1)
00006f e0e1      	LDI  R30,LOW(1)
000070 e0f0      	LDI  R31,HIGH(1)
000071 15ea      	CP   R30,R10
000072 05fb      	CPC  R31,R11
000073 f011      	BREQ _0x3
                 ; 0000 0024 {
                 ; 0000 0025 toggle = 1;
000074 015f      	MOVW R10,R30
                 ; 0000 0026 }
                 ; 0000 0027 else
000075 c005      	RJMP _0x4
                 _0x3:
                 ; 0000 0028 {
                 ; 0000 0029 left_number--;
000076 01f2      	MOVW R30,R4
000077 9731      	SBIW R30,1
000078 012f      	MOVW R4,R30
                 ; 0000 002A toggle = 0;
000079 24aa      	CLR  R10
00007a 24bb      	CLR  R11
                 ; 0000 002B }
                 _0x4:
                 ; 0000 002C 
                 ; 0000 002D }
00007b 91e9      	LD   R30,Y+
00007c bfef      	OUT  SREG,R30
00007d 91f9      	LD   R31,Y+
00007e 91e9      	LD   R30,Y+
00007f 9518      	RETI
                 ; .FEND
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0030 {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
000080 93aa      	ST   -Y,R26
000081 93ba      	ST   -Y,R27
000082 93ea      	ST   -Y,R30
000083 93fa      	ST   -Y,R31
000084 b7ef      	IN   R30,SREG
000085 93ea      	ST   -Y,R30
                 ; 0000 0031 index++;
000086 01f4      	MOVW R30,R8
000087 9631      	ADIW R30,1
000088 014f      	MOVW R8,R30
                 ; 0000 0032 index %= 8;
000089 e0a7      	LDI  R26,LOW(7)
00008a e0b0      	LDI  R27,HIGH(7)
00008b 940e 01ab 	CALL __MANDW12
00008d 014f      	MOVW R8,R30
                 ; 0000 0033 }
00008e 91e9      	LD   R30,Y+
00008f bfef      	OUT  SREG,R30
000090 91f9      	LD   R31,Y+
000091 91e9      	LD   R30,Y+
000092 91b9      	LD   R27,Y+
000093 91a9      	LD   R26,Y+
000094 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0037 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0038 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0< ...
000095 e0e0      	LDI  R30,LOW(0)
000096 bbea      	OUT  0x1A,R30
                 ; 0000 0039 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<< ...
000097 bbeb      	OUT  0x1B,R30
                 ; 0000 003A DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0< ...
000098 bbe7      	OUT  0x17,R30
                 ; 0000 003B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<< ...
000099 bbe8      	OUT  0x18,R30
                 ; 0000 003C DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1< ...
00009a efef      	LDI  R30,LOW(255)
00009b bbe4      	OUT  0x14,R30
                 ; 0000 003D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<< ...
00009c e0e0      	LDI  R30,LOW(0)
00009d bbe5      	OUT  0x15,R30
                 ; 0000 003E DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1< ...
00009e efef      	LDI  R30,LOW(255)
00009f bbe1      	OUT  0x11,R30
                 ; 0000 003F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<< ...
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 bbe2      	OUT  0x12,R30
                 ; 0000 0040 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01)  ...
0000a2 e0ec      	LDI  R30,LOW(12)
0000a3 bfe3      	OUT  0x33,R30
                 ; 0000 0041 TCNT0=0x00;
0000a4 e0e0      	LDI  R30,LOW(0)
0000a5 bfe2      	OUT  0x32,R30
                 ; 0000 0042 OCR0=0x7C;
0000a6 e7ec      	LDI  R30,LOW(124)
0000a7 bfec      	OUT  0x3C,R30
                 ; 0000 0043 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<< ...
0000a8 e0e0      	LDI  R30,LOW(0)
0000a9 bdef      	OUT  0x2F,R30
                 ; 0000 0044 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) ...
0000aa e0eb      	LDI  R30,LOW(11)
0000ab bdee      	OUT  0x2E,R30
                 ; 0000 0045 TCNT1H=0x00;
0000ac e0e0      	LDI  R30,LOW(0)
0000ad bded      	OUT  0x2D,R30
                 ; 0000 0046 TCNT1L=0x00;
0000ae bdec      	OUT  0x2C,R30
                 ; 0000 0047 ICR1H=0x00;
0000af bde7      	OUT  0x27,R30
                 ; 0000 0048 ICR1L=0x00;
0000b0 bde6      	OUT  0x26,R30
                 ; 0000 0049 OCR1AH=0xF4;
0000b1 efe4      	LDI  R30,LOW(244)
0000b2 bdeb      	OUT  0x2B,R30
                 ; 0000 004A OCR1AL=0x23;
0000b3 e2e3      	LDI  R30,LOW(35)
0000b4 bdea      	OUT  0x2A,R30
                 ; 0000 004B OCR1BH=0x00;
0000b5 e0e0      	LDI  R30,LOW(0)
0000b6 bde9      	OUT  0x29,R30
                 ; 0000 004C OCR1BL=0x00;
0000b7 bde8      	OUT  0x28,R30
                 ; 0000 004D ASSR=0<<AS2;
0000b8 bde2      	OUT  0x22,R30
                 ; 0000 004E TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) |  ...
0000b9 bde5      	OUT  0x25,R30
                 ; 0000 004F TCNT2=0x00;
0000ba bde4      	OUT  0x24,R30
                 ; 0000 0050 OCR2=0x00;
0000bb bde3      	OUT  0x23,R30
                 ; 0000 0051 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TO ...
0000bc e1e2      	LDI  R30,LOW(18)
0000bd bfe9      	OUT  0x39,R30
                 ; 0000 0052 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000be e0e0      	LDI  R30,LOW(0)
0000bf bfe5      	OUT  0x35,R30
                 ; 0000 0053 MCUCSR=(0<<ISC2);
0000c0 bfe4      	OUT  0x34,R30
                 ; 0000 0054 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2)  ...
0000c1 b9ea      	OUT  0xA,R30
                 ; 0000 0055 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<AC ...
0000c2 e8e0      	LDI  R30,LOW(128)
0000c3 b9e8      	OUT  0x8,R30
                 ; 0000 0056 SFIOR=(0<<ACME);
0000c4 e0e0      	LDI  R30,LOW(0)
0000c5 bfe0      	OUT  0x30,R30
                 ; 0000 0057 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | ...
0000c6 b9e6      	OUT  0x6,R30
                 ; 0000 0058 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<< ...
0000c7 b9ed      	OUT  0xD,R30
                 ; 0000 0059 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000c8 bfe6      	OUT  0x36,R30
                 ; 0000 005A #asm("sei")
0000c9 9478      	SEI
                 ; 0000 005B 
                 ; 0000 005C while (1)
                 _0x5:
                 ; 0000 005D {
                 ; 0000 005E if (left_number < lowest)
0000ca 91e0 0260 	LDS  R30,_lowest
0000cc 91f0 0261 	LDS  R31,_lowest+1
0000ce 164e      	CP   R4,R30
0000cf 065f      	CPC  R5,R31
0000d0 f40c      	BRGE _0x8
                 ; 0000 005F {
                 ; 0000 0060 left_number = highest;
0000d1 0126      	MOVW R4,R12
                 ; 0000 0061 }
                 ; 0000 0062 if (right_number > highest)
                 _0x8:
                +
0000d2 14c6     +CP R12 , R6
0000d3 04d7     +CPC R13 , R7
                 	__CPWRR 12,13,6,7
0000d4 f424      	BRGE _0x9
                 ; 0000 0063 {
                 ; 0000 0064 right_number = lowest;
                +
0000d5 9060 0260+LDS R6 , 0 + ( _lowest )
0000d7 9070 0261+LDS R7 , 0 + ( _lowest ) + 1
                 	__GETWRMN 6,7,0,_lowest
                 ; 0000 0065 }
                 ; 0000 0066 divisor = 1000;
                 _0x9:
0000d9 eee8      	LDI  R30,LOW(1000)
0000da e0f3      	LDI  R31,HIGH(1000)
0000db 93e0 0272 	STS  _divisor,R30
0000dd 93f0 0273 	STS  _divisor+1,R31
                 ; 0000 0067 digitIndex = 0;
0000df e0e0      	LDI  R30,LOW(0)
0000e0 93e0 0274 	STS  _digitIndex,R30
0000e2 93e0 0275 	STS  _digitIndex+1,R30
                 ; 0000 0068 while (divisor >= 1) {
                 _0xA:
0000e4 91a0 0272 	LDS  R26,_divisor
0000e6 91b0 0273 	LDS  R27,_divisor+1
0000e8 9711      	SBIW R26,1
0000e9 f134      	BRLT _0xC
                 ; 0000 0069 leftDigits[digitIndex] = (left_number / divisor) % 10;
0000ea 91e0 0274 	LDS  R30,_digitIndex
0000ec 91f0 0275 	LDS  R31,_digitIndex+1
0000ee e6a2      	LDI  R26,LOW(_leftDigits)
0000ef e0b2      	LDI  R27,HIGH(_leftDigits)
0000f0 d07b      	RCALL SUBOPT_0x0
0000f1 01d2      	MOVW R26,R4
0000f2 d083      	RCALL SUBOPT_0x1
                 ; 0000 006A rightDigits[digitIndex] = (right_number / divisor) % 10;
0000f3 91e0 0274 	LDS  R30,_digitIndex
0000f5 91f0 0275 	LDS  R31,_digitIndex+1
0000f7 e6aa      	LDI  R26,LOW(_rightDigits)
0000f8 e0b2      	LDI  R27,HIGH(_rightDigits)
0000f9 d072      	RCALL SUBOPT_0x0
0000fa 01d3      	MOVW R26,R6
0000fb d07a      	RCALL SUBOPT_0x1
                 ; 0000 006B divisor /= 10;
0000fc 91a0 0272 	LDS  R26,_divisor
0000fe 91b0 0273 	LDS  R27,_divisor+1
000100 e0ea      	LDI  R30,LOW(10)
000101 e0f0      	LDI  R31,HIGH(10)
000102 940e 0198 	CALL __DIVW21
000104 93e0 0272 	STS  _divisor,R30
000106 93f0 0273 	STS  _divisor+1,R31
                 ; 0000 006C digitIndex++;
000108 e7a4      	LDI  R26,LOW(_digitIndex)
000109 e0b2      	LDI  R27,HIGH(_digitIndex)
00010a 91ed      	LD   R30,X+
00010b 91fd      	LD   R31,X+
00010c 9631      	ADIW R30,1
00010d 93fe      	ST   -X,R31
00010e 93ee      	ST   -X,R30
                 ; 0000 006D }
00010f cfd4      	RJMP _0xA
                 _0xC:
                 ; 0000 006E switch(index)
000110 01f4      	MOVW R30,R8
                 ; 0000 006F {
                 ; 0000 0070 case 0:
000111 9730      	SBIW R30,0
000112 f439      	BRNE _0x10
                 ; 0000 0071 PORTD = 0xFE;
000113 efee      	LDI  R30,LOW(254)
000114 bbe2      	OUT  0x12,R30
                 ; 0000 0072 PORTC = segments[leftDigits[0]];
000115 91e0 0262 	LDS  R30,_leftDigits
000117 91f0 0263 	LDS  R31,_leftDigits+1
000119 c04c      	RJMP _0x19
                 ; 0000 0073 break;
                 ; 0000 0074 case 1:
                 _0x10:
00011a 30e1      	CPI  R30,LOW(0x1)
00011b e0a0      	LDI  R26,HIGH(0x1)
00011c 07fa      	CPC  R31,R26
00011d f439      	BRNE _0x11
                 ; 0000 0075 PORTD = 0xFD;
00011e efed      	LDI  R30,LOW(253)
00011f bbe2      	OUT  0x12,R30
                 ; 0000 0076 PORTC = segments[leftDigits[1]];
                +
000120 91e0 0264+LDS R30 , _leftDigits + ( 2 )
000122 91f0 0265+LDS R31 , _leftDigits + ( 2 ) + 1
                 	__GETW1MN _leftDigits,2
000124 c041      	RJMP _0x19
                 ; 0000 0077 break;
                 ; 0000 0078 case 2:
                 _0x11:
000125 30e2      	CPI  R30,LOW(0x2)
000126 e0a0      	LDI  R26,HIGH(0x2)
000127 07fa      	CPC  R31,R26
000128 f439      	BRNE _0x12
                 ; 0000 0079 PORTD = 0xFB;
000129 efeb      	LDI  R30,LOW(251)
00012a bbe2      	OUT  0x12,R30
                 ; 0000 007A PORTC = segments[leftDigits[2]];
                +
00012b 91e0 0266+LDS R30 , _leftDigits + ( 4 )
00012d 91f0 0267+LDS R31 , _leftDigits + ( 4 ) + 1
                 	__GETW1MN _leftDigits,4
00012f c036      	RJMP _0x19
                 ; 0000 007B break;
                 ; 0000 007C case 3:
                 _0x12:
000130 30e3      	CPI  R30,LOW(0x3)
000131 e0a0      	LDI  R26,HIGH(0x3)
000132 07fa      	CPC  R31,R26
000133 f439      	BRNE _0x13
                 ; 0000 007D PORTD = 0xF7;
000134 efe7      	LDI  R30,LOW(247)
000135 bbe2      	OUT  0x12,R30
                 ; 0000 007E PORTC = segments[leftDigits[3]];
                +
000136 91e0 0268+LDS R30 , _leftDigits + ( 6 )
000138 91f0 0269+LDS R31 , _leftDigits + ( 6 ) + 1
                 	__GETW1MN _leftDigits,6
00013a c02b      	RJMP _0x19
                 ; 0000 007F break;
                 ; 0000 0080 case 4:
                 _0x13:
00013b 30e4      	CPI  R30,LOW(0x4)
00013c e0a0      	LDI  R26,HIGH(0x4)
00013d 07fa      	CPC  R31,R26
00013e f439      	BRNE _0x14
                 ; 0000 0081 PORTD = 0xEF;
00013f eeef      	LDI  R30,LOW(239)
000140 bbe2      	OUT  0x12,R30
                 ; 0000 0082 PORTC = segments[rightDigits[0]];
000141 91e0 026a 	LDS  R30,_rightDigits
000143 91f0 026b 	LDS  R31,_rightDigits+1
000145 c020      	RJMP _0x19
                 ; 0000 0083 break;
                 ; 0000 0084 case 5:
                 _0x14:
000146 30e5      	CPI  R30,LOW(0x5)
000147 e0a0      	LDI  R26,HIGH(0x5)
000148 07fa      	CPC  R31,R26
000149 f439      	BRNE _0x15
                 ; 0000 0085 PORTD = 0xDF;
00014a edef      	LDI  R30,LOW(223)
00014b bbe2      	OUT  0x12,R30
                 ; 0000 0086 PORTC = segments[rightDigits[1]];
                +
00014c 91e0 026c+LDS R30 , _rightDigits + ( 2 )
00014e 91f0 026d+LDS R31 , _rightDigits + ( 2 ) + 1
                 	__GETW1MN _rightDigits,2
000150 c015      	RJMP _0x19
                 ; 0000 0087 break;
                 ; 0000 0088 case 6:
                 _0x15:
000151 30e6      	CPI  R30,LOW(0x6)
000152 e0a0      	LDI  R26,HIGH(0x6)
000153 07fa      	CPC  R31,R26
000154 f439      	BRNE _0x16
                 ; 0000 0089 PORTD = 0xBF;
000155 ebef      	LDI  R30,LOW(191)
000156 bbe2      	OUT  0x12,R30
                 ; 0000 008A PORTC = segments[rightDigits[2]];
                +
000157 91e0 026e+LDS R30 , _rightDigits + ( 4 )
000159 91f0 026f+LDS R31 , _rightDigits + ( 4 ) + 1
                 	__GETW1MN _rightDigits,4
00015b c00a      	RJMP _0x19
                 ; 0000 008B break;
                 ; 0000 008C case 7:
                 _0x16:
00015c 30e7      	CPI  R30,LOW(0x7)
00015d e0a0      	LDI  R26,HIGH(0x7)
00015e 07fa      	CPC  R31,R26
00015f f451      	BRNE _0xF
                 ; 0000 008D PORTD = 0x7F;
000160 e7ef      	LDI  R30,LOW(127)
000161 bbe2      	OUT  0x12,R30
                 ; 0000 008E PORTC = segments[rightDigits[3]];
                +
000162 91e0 0270+LDS R30 , _rightDigits + ( 6 )
000164 91f0 0271+LDS R31 , _rightDigits + ( 6 ) + 1
                 	__GETW1MN _rightDigits,6
                 _0x19:
000166 5aec      	SUBI R30,LOW(-_segments*2)
000167 4fff      	SBCI R31,HIGH(-_segments*2)
000168 9004      	LPM  R0,Z
000169 ba05      	OUT  0x15,R0
                 ; 0000 008F break;
                 ; 0000 0090 }
                 _0xF:
                 ; 0000 0091 
                 ; 0000 0092 }
00016a cf5f      	RJMP _0x5
                 ; 0000 0093 }
                 _0x18:
00016b cfff      	RJMP _0x18
                 ; .FEND
                 
                 	.DSEG
                 _lowest:
000260           	.BYTE 0x2
                 _leftDigits:
000262           	.BYTE 0x8
                 _rightDigits:
00026a           	.BYTE 0x8
                 _divisor:
000272           	.BYTE 0x2
                 _digitIndex:
000274           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
00016c 0fee      	LSL  R30
00016d 1fff      	ROL  R31
00016e 0fea      	ADD  R30,R26
00016f 1ffb      	ADC  R31,R27
000170 01bf      	MOVW R22,R30
000171 91e0 0272 	LDS  R30,_divisor
000173 91f0 0273 	LDS  R31,_divisor+1
000175 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000176 940e 0198 	CALL __DIVW21
000178 01df      	MOVW R26,R30
000179 e0ea      	LDI  R30,LOW(10)
00017a e0f0      	LDI  R31,HIGH(10)
00017b 940e 019d 	CALL __MODW21
00017d 01db      	MOVW R26,R22
00017e 93ed      	ST   X+,R30
00017f 93fc      	ST   X,R31
000180 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __ANEGW1:
000181 95f1      	NEG  R31
000182 95e1      	NEG  R30
000183 40f0      	SBCI R31,0
000184 9508      	RET
                 
                 __DIVW21U:
000185 2400      	CLR  R0
000186 2411      	CLR  R1
000187 e190      	LDI  R25,16
                 __DIVW21U1:
000188 0faa      	LSL  R26
000189 1fbb      	ROL  R27
00018a 1c00      	ROL  R0
00018b 1c11      	ROL  R1
00018c 1a0e      	SUB  R0,R30
00018d 0a1f      	SBC  R1,R31
00018e f418      	BRCC __DIVW21U2
00018f 0e0e      	ADD  R0,R30
000190 1e1f      	ADC  R1,R31
000191 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000192 60a1      	SBR  R26,1
                 __DIVW21U3:
000193 959a      	DEC  R25
000194 f799      	BRNE __DIVW21U1
000195 01fd      	MOVW R30,R26
000196 01d0      	MOVW R26,R0
000197 9508      	RET
                 
                 __DIVW21:
000198 d01c      	RCALL __CHKSIGNW
000199 dfeb      	RCALL __DIVW21U
00019a f40e      	BRTC __DIVW211
00019b dfe5      	RCALL __ANEGW1
                 __DIVW211:
00019c 9508      	RET
                 
                 __MODW21:
00019d 94e8      	CLT
00019e ffb7      	SBRS R27,7
00019f c004      	RJMP __MODW211
0001a0 95b1      	NEG  R27
0001a1 95a1      	NEG  R26
0001a2 40b0      	SBCI R27,0
0001a3 9468      	SET
                 __MODW211:
0001a4 fdf7      	SBRC R31,7
0001a5 dfdb      	RCALL __ANEGW1
0001a6 dfde      	RCALL __DIVW21U
0001a7 01fd      	MOVW R30,R26
0001a8 f40e      	BRTC __MODW212
0001a9 dfd7      	RCALL __ANEGW1
                 __MODW212:
0001aa 9508      	RET
                 
                 __MANDW12:
0001ab 94e8      	CLT
0001ac fff7      	SBRS R31,7
0001ad c002      	RJMP __MANDW121
0001ae dfd2      	RCALL __ANEGW1
0001af 9468      	SET
                 __MANDW121:
0001b0 23ea      	AND  R30,R26
0001b1 23fb      	AND  R31,R27
0001b2 f40e      	BRTC __MANDW122
0001b3 dfcd      	RCALL __ANEGW1
                 __MANDW122:
0001b4 9508      	RET
                 
                 __CHKSIGNW:
0001b5 94e8      	CLT
0001b6 fff7      	SBRS R31,7
0001b7 c002      	RJMP __CHKSW1
0001b8 dfc8      	RCALL __ANEGW1
0001b9 9468      	SET
                 __CHKSW1:
0001ba ffb7      	SBRS R27,7
0001bb c006      	RJMP __CHKSW2
0001bc 95b1      	NEG  R27
0001bd 95a1      	NEG  R26
0001be 40b0      	SBCI R27,0
0001bf f800      	BLD  R0,0
0001c0 9403      	INC  R0
0001c1 fa00      	BST  R0,0
                 __CHKSW2:
0001c2 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  14 r1 :   5 r2 :   0 r3 :   0 r4 :   5 r5 :   1 r6 :   5 r7 :   2 
r8 :   4 r9 :   0 r10:   3 r11:   2 r12:   2 r13:   1 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   0 
r24:   7 r25:   4 r26:  39 r27:  19 r28:   1 r29:   1 r30: 152 r31:  48 
x  :   9 y  :  16 z  :   8 
Registers used: 23 out of 35 (65.7%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :   3 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   1 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   0 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   4 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :  10 cpi   :   7 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   1 jmp   :  22 ld    :  10 ldd   :   0 ldi   :  63 
lds   :  30 lpm   :   9 lsl   :   2 lsr   :   0 mov   :   0 movw  :  21 
mul   :   0 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   0 
ori   :   0 out   :  51 pop   :   0 push  :   0 rcall :  13 ret   :   8 
reti  :   2 rjmp  :  17 rol   :   4 ror   :   0 sbc   :   1 sbci  :   4 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   6 sbr   :   1 sbrc  :   1 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  15 std   :   0 sts   :   6 sub   :   1 subi  :   1 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 48 out of 116 (41.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000386    868     34    902   32768   2.8%
[.dseg] 0x000060 0x000276      0     22     22    2048   1.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
