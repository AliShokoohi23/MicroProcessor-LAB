;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;int left_number = 0, right_number = 0, index = 0, toggle = 0, highest = 9999, lo ...
;int leftDigits[4], rightDigits[4];
;int divisor, digitIndex;
;const char segments[] = { 0x3F, 0x06, 0x5B, 0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,  ...
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021 right_number++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0022 
; 0000 0023 if (toggle != 1)
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0024 {
; 0000 0025 toggle = 1;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0026 }
; 0000 0027 else
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0028 {
; 0000 0029 left_number--;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002A toggle = 0;
;PCODE: $0000001C VOL: 0
; 0000 002B }
;PCODE: $0000001D VOL: 0
; 0000 002C 
; 0000 002D }
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 0030 {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0031 index++;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0032 index %= 8;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0033 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;void main(void)
; 0000 0037 {
;PCODE: $0000002D VOL: 0
; 0000 0038 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0< ...
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0039 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<< ...
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 003A DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0< ...
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<< ...
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003C DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1< ...
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<< ...
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 003E DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1< ...
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<< ...
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0040 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01)  ...
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0041 TCNT0=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0042 OCR0=0x7C;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0043 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<< ...
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0044 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) ...
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0045 TCNT1H=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0046 TCNT1L=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0047 ICR1H=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0048 ICR1L=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0049 OCR1AH=0xF4;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 004A OCR1AL=0x23;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 004B OCR1BH=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004C OCR1BL=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 004D ASSR=0<<AS2;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 004E TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) |  ...
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 004F TCNT2=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0050 OCR2=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0051 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TO ...
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0052 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0053 MCUCSR=(0<<ISC2);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0054 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2)  ...
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0055 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<AC ...
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0056 SFIOR=(0<<ACME);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0057 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | ...
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0058 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<< ...
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0059 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 005A #asm("sei")
;PCODE: $00000072 VOL: 0
; 0000 005B 
; 0000 005C while (1)
;PCODE: $00000073 VOL: 0
; 0000 005D {
; 0000 005E if (left_number < lowest)
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 005F {
; 0000 0060 left_number = highest;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0061 }
; 0000 0062 if (right_number > highest)
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0063 {
; 0000 0064 right_number = lowest;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0065 }
; 0000 0066 divisor = 1000;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0067 digitIndex = 0;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0068 while (divisor >= 1) {
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0069 leftDigits[digitIndex] = (left_number / divisor) % 10;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 006A rightDigits[digitIndex] = (right_number / divisor) % 10;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 006B divisor /= 10;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 006C digitIndex++;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 006D }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 006E switch(index)
;PCODE: $000000AC VOL: 0
; 0000 006F {
; 0000 0070 case 0:
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0071 PORTD = 0xFE;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0072 PORTC = segments[leftDigits[0]];
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0073 break;
;PCODE: $000000B5 VOL: 0
; 0000 0074 case 1:
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0075 PORTD = 0xFD;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0076 PORTC = segments[leftDigits[1]];
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0077 break;
;PCODE: $000000C1 VOL: 0
; 0000 0078 case 2:
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0079 PORTD = 0xFB;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 007A PORTC = segments[leftDigits[2]];
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 007B break;
;PCODE: $000000CD VOL: 0
; 0000 007C case 3:
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 007D PORTD = 0xF7;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 007E PORTC = segments[leftDigits[3]];
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 007F break;
;PCODE: $000000D9 VOL: 0
; 0000 0080 case 4:
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0081 PORTD = 0xEF;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0082 PORTC = segments[rightDigits[0]];
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0083 break;
;PCODE: $000000E4 VOL: 0
; 0000 0084 case 5:
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0085 PORTD = 0xDF;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0086 PORTC = segments[rightDigits[1]];
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0087 break;
;PCODE: $000000F0 VOL: 0
; 0000 0088 case 6:
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0089 PORTD = 0xBF;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 008A PORTC = segments[rightDigits[2]];
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 008B break;
;PCODE: $000000FC VOL: 0
; 0000 008C case 7:
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 008D PORTD = 0x7F;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 008E PORTC = segments[rightDigits[3]];
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 008F break;
;PCODE: $00000108 VOL: 0
; 0000 0090 }
;PCODE: $00000109 VOL: 0
; 0000 0091 
; 0000 0092 }
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0093 }
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
