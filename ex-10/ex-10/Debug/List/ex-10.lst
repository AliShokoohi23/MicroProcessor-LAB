
AVRASM ver. 2.1.30  E:\University\Term 6\Micro\ex-10\ex-10\Debug\List\ex-10.asm Wed May 15 15:04:37 2024

E:\University\Term 6\Micro\ex-10\ex-10\Debug\List\ex-10.asm(1083): warning: Register r5 already defined by the .DEF directive
E:\University\Term 6\Micro\ex-10\ex-10\Debug\List\ex-10.asm(1084): warning: Register r4 already defined by the .DEF directive
E:\University\Term 6\Micro\ex-10\ex-10\Debug\List\ex-10.asm(1085): warning: Register r7 already defined by the .DEF directive
E:\University\Term 6\Micro\ex-10\ex-10\Debug\List\ex-10.asm(1086): warning: Register r6 already defined by the .DEF directive
E:\University\Term 6\Micro\ex-10\ex-10\Debug\List\ex-10.asm(1087): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _number=R5
                 	.DEF _led=R4
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004a 	JMP  __RESET
000002 940c 0077 	JMP  _ext_int0_isr
000004 940c 007f 	JMP  _ext_int1_isr
000006 940c 0087 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G105:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G105:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000      	.DB  0x0,0x0
                 
                 _0x0:
000034 2020
E:\University\Term 6\Micro\ex-10\ex-10\Debug\List\ex-10.asm(1129): warning: .cseg .db misalignment - padding zero byte
000035 0000      	.DB  0x20,0x20,0x0
                 _0x2000060:
E:\University\Term 6\Micro\ex-10\ex-10\Debug\List\ex-10.asm(1131): warning: .cseg .db misalignment - padding zero byte
000036 0001      	.DB  0x1
                 _0x2000000:
000037 4e2d
000038 4e41
000039 4900
00003a 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\University\Term 6\Micro\ex-10\ex-10\Debug\List\ex-10.asm(1134): warning: .cseg .db misalignment - padding zero byte
00003b 0000      	.DB  0x0
                 _0x2020003:
00003c c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003d 0002      	.DW  0x02
00003e 0004      	.DW  0x04
00003f 0066      	.DW  __REG_VARS*2
                 
000040 0003      	.DW  0x03
000041 0260      	.DW  _0xC
000042 0068      	.DW  _0x0*2
                 
000043 0001      	.DW  0x01
000044 0263      	.DW  __seed_G100
000045 006c      	.DW  _0x2000060*2
                 
000046 0002      	.DW  0x02
000047 0267      	.DW  __base_y_G101
000048 0078      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000049 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004a 94f8      	CLI
00004b 27ee      	CLR  R30
00004c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004d e0f1      	LDI  R31,1
00004e bffb      	OUT  GICR,R31
00004f bfeb      	OUT  GICR,R30
000050 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000051 e08d      	LDI  R24,(14-2)+1
000052 e0a2      	LDI  R26,2
000053 27bb      	CLR  R27
                 __CLEAR_REG:
000054 93ed      	ST   X+,R30
000055 958a      	DEC  R24
000056 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000057 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000058 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000059 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005a 93ed      	ST   X+,R30
00005b 9701      	SBIW R24,1
00005c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005d e7ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005f 9185      	LPM  R24,Z+
000060 9195      	LPM  R25,Z+
000061 9700      	SBIW R24,0
000062 f061      	BREQ __GLOBAL_INI_END
000063 91a5      	LPM  R26,Z+
000064 91b5      	LPM  R27,Z+
000065 9005      	LPM  R0,Z+
000066 9015      	LPM  R1,Z+
000067 01bf      	MOVW R22,R30
000068 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000069 9005      	LPM  R0,Z+
00006a 920d      	ST   X+,R0
00006b 9701      	SBIW R24,1
00006c f7e1      	BRNE __GLOBAL_INI_LOOP
00006d 01fb      	MOVW R30,R22
00006e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000070 bfed      	OUT  SPL,R30
000071 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000072 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000073 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000074 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000075 940c 0094 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;signed char number = 0;
                 ;unsigned char led = 0;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 000D {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000077 940e 0193 	CALL SUBOPT_0x0
                 ; 0000 000E if(led == 1)
000079 f419      	BRNE _0x3
                 ; 0000 000F number+=10;
00007a e0ea      	LDI  R30,LOW(10)
00007b 0e5e      	ADD  R5,R30
                 ; 0000 0010 else
00007c c001      	RJMP _0x4
                 _0x3:
                 ; 0000 0011 number++;
00007d 9453      	INC  R5
                 ; 0000 0012 }
                 _0x4:
00007e c011      	RJMP _0xE
                 ; .FEND
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0015 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
00007f 940e 0193 	CALL SUBOPT_0x0
                 ; 0000 0016 if(led == 1)
000081 f419      	BRNE _0x5
                 ; 0000 0017 number-=10;
000082 e0ea      	LDI  R30,LOW(10)
000083 1a5e      	SUB  R5,R30
                 ; 0000 0018 else
000084 c001      	RJMP _0x6
                 _0x5:
                 ; 0000 0019 number--;
000085 945a      	DEC  R5
                 ; 0000 001A }
                 _0x6:
000086 c009      	RJMP _0xE
                 ; .FEND
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 001D {
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
000087 940e 0193 	CALL SUBOPT_0x0
                 ; 0000 001E if(led == 1)
000089 f419      	BRNE _0x7
                 ; 0000 001F {
                 ; 0000 0020 led = 0;
00008a 2444      	CLR  R4
                 ; 0000 0021 PORTC = PORTC & 0b11110111;
00008b 98ab      	CBI  0x15,3
                 ; 0000 0022 }
                 ; 0000 0023 else
00008c c003      	RJMP _0x8
                 _0x7:
                 ; 0000 0024 {
                 ; 0000 0025 led = 1;
00008d e0e1      	LDI  R30,LOW(1)
00008e 2e4e      	MOV  R4,R30
                 ; 0000 0026 PORTC = PORTC | 0b00001000;
00008f 9aab      	SBI  0x15,3
                 ; 0000 0027 }
                 _0x8:
                 ; 0000 0028 }
                 _0xE:
000090 91e9      	LD   R30,Y+
000091 bfef      	OUT  SREG,R30
000092 91e9      	LD   R30,Y+
000093 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 002B {
                 _main:
                 ; .FSTART _main
                 ; 0000 002C DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0< ...
000094 e0e0      	LDI  R30,LOW(0)
000095 bbea      	OUT  0x1A,R30
                 ; 0000 002D PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<< ...
000096 bbeb      	OUT  0x1B,R30
                 ; 0000 002E DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0< ...
000097 bbe7      	OUT  0x17,R30
                 ; 0000 002F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<< ...
000098 bbe8      	OUT  0x18,R30
                 ; 0000 0030 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (0<<DDC2) | (0< ...
000099 e0e8      	LDI  R30,LOW(8)
00009a bbe4      	OUT  0x14,R30
                 ; 0000 0031 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<< ...
00009b e0e0      	LDI  R30,LOW(0)
00009c bbe5      	OUT  0x15,R30
                 ; 0000 0032 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0< ...
00009d bbe1      	OUT  0x11,R30
                 ; 0000 0033 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<< ...
00009e bbe2      	OUT  0x12,R30
                 ; 0000 0034 
                 ; 0000 0035 GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
00009f b7eb      	IN   R30,0x3B
0000a0 6ee0      	ORI  R30,LOW(0xE0)
0000a1 bfeb      	OUT  0x3B,R30
                 ; 0000 0036 MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
0000a2 e0ea      	LDI  R30,LOW(10)
0000a3 bfe5      	OUT  0x35,R30
                 ; 0000 0037 MCUCSR=(0<<ISC2);
0000a4 e0e0      	LDI  R30,LOW(0)
0000a5 bfe4      	OUT  0x34,R30
                 ; 0000 0038 GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
0000a6 eee0      	LDI  R30,LOW(224)
0000a7 bfea      	OUT  0x3A,R30
                 ; 0000 0039 
                 ; 0000 003A ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<AC ...
0000a8 e8e0      	LDI  R30,LOW(128)
0000a9 b9e8      	OUT  0x8,R30
                 ; 0000 003B SFIOR=(0<<ACME);
0000aa e0e0      	LDI  R30,LOW(0)
0000ab bfe0      	OUT  0x30,R30
                 ; 0000 003C 
                 ; 0000 003D lcd_init(16);
0000ac e1a0      	LDI  R26,LOW(16)
0000ad 940e 0164 	CALL _lcd_init
                 ; 0000 003E #asm("sei")
0000af 9478      	SEI
                 ; 0000 003F 
                 ; 0000 0040 while (1)
                 _0x9:
                 ; 0000 0041 {
                 ; 0000 0042 char* output = 0;
                 ; 0000 0043 lcd_gotoxy(0,0);
0000b0 9722      	SBIW R28,2
0000b1 e0e0      	LDI  R30,LOW(0)
0000b2 83e8      	ST   Y,R30
0000b3 83e9      	STD  Y+1,R30
                 ;	*output -> Y+0
0000b4 93ea      	ST   -Y,R30
0000b5 e0a0      	LDI  R26,LOW(0)
0000b6 940e 0121 	CALL _lcd_gotoxy
                 ; 0000 0044 itoa(number,output);
0000b8 2de5      	MOV  R30,R5
0000b9 e0f0      	LDI  R31,0
0000ba fde7      	SBRC R30,7
0000bb efff      	SER  R31
0000bc 93fa      	ST   -Y,R31
0000bd 93ea      	ST   -Y,R30
0000be 81aa      	LDD  R26,Y+2
0000bf 81bb      	LDD  R27,Y+2+1
0000c0 940e 00d1 	CALL _itoa
                 ; 0000 0045 lcd_puts(output);
0000c2 81a8      	LD   R26,Y
0000c3 81b9      	LDD  R27,Y+1
0000c4 940e 0153 	CALL _lcd_puts
                 ; 0000 0046 lcd_puts("  ");
                +
0000c6 e6a0     +LDI R26 , LOW ( _0xC + ( 0 ) )
0000c7 e0b2     +LDI R27 , HIGH ( _0xC + ( 0 ) )
                 	__POINTW2MN _0xC,0
0000c8 940e 0153 	CALL _lcd_puts
                 ; 0000 0047 delay_ms(20);
0000ca e1a4      	LDI  R26,LOW(20)
0000cb e0b0      	LDI  R27,0
0000cc 940e 01b1 	CALL _delay_ms
                 ; 0000 0048 }
0000ce 9622      	ADIW R28,2
0000cf cfe0      	RJMP _0x9
                 ; 0000 0049 }
                 _0xD:
0000d0 cfff      	RJMP _0xD
                 ; .FEND
                 
                 	.DSEG
                 _0xC:
000260           	.BYTE 0x3
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
0000d1 93ba      	ST   -Y,R27
0000d2 93aa      	ST   -Y,R26
0000d3 91a9          ld   r26,y+
0000d4 91b9          ld   r27,y+
0000d5 91e9          ld   r30,y+
0000d6 91f9          ld   r31,y+
0000d7 9630          adiw r30,0
0000d8 f42a          brpl __itoa0
0000d9 95e0          com  r30
0000da 95f0          com  r31
0000db 9631          adiw r30,1
0000dc e26d          ldi  r22,'-'
0000dd 936d          st   x+,r22
                 __itoa0:
0000de 94e8          clt
0000df e180          ldi  r24,low(10000)
0000e0 e297          ldi  r25,high(10000)
0000e1 d00d          rcall __itoa1
0000e2 ee88          ldi  r24,low(1000)
0000e3 e093          ldi  r25,high(1000)
0000e4 d00a          rcall __itoa1
0000e5 e684          ldi  r24,100
0000e6 2799          clr  r25
0000e7 d007          rcall __itoa1
0000e8 e08a          ldi  r24,10
0000e9 d005          rcall __itoa1
0000ea 2f6e          mov  r22,r30
0000eb d010          rcall __itoa5
0000ec 2766          clr  r22
0000ed 936c          st   x,r22
0000ee 9508          ret
                 
                 __itoa1:
0000ef 2766          clr	 r22
                 __itoa2:
0000f0 17e8          cp   r30,r24
0000f1 07f9          cpc  r31,r25
0000f2 f020          brlo __itoa3
0000f3 9563          inc  r22
0000f4 1be8          sub  r30,r24
0000f5 0bf9          sbc  r31,r25
0000f6 f7c9          brne __itoa2
                 __itoa3:
0000f7 2366          tst  r22
0000f8 f411          brne __itoa4
0000f9 f016          brts __itoa5
0000fa 9508          ret
                 __itoa4:
0000fb 9468          set
                 __itoa5:
0000fc 5d60          subi r22,-0x30
0000fd 936d          st   x+,r22
0000fe 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0000ff 931a      	ST   -Y,R17
000100 2f1a      	MOV  R17,R26
000101 b3e5      	IN   R30,0x15
000102 70ef      	ANDI R30,LOW(0xF)
000103 2fae      	MOV  R26,R30
000104 2fe1      	MOV  R30,R17
000105 7fe0      	ANDI R30,LOW(0xF0)
000106 2bea      	OR   R30,R26
000107 bbe5      	OUT  0x15,R30
                +
000108 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000109 958a     +DEC R24
00010a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00010b 9aaa      	SBI  0x15,2
                +
00010c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00010d 958a     +DEC R24
00010e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00010f 98aa      	CBI  0x15,2
                +
000110 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000111 958a     +DEC R24
000112 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000113 c07d      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000114 93aa      	ST   -Y,R26
000115 81a8      	LD   R26,Y
000116 dfe8      	RCALL __lcd_write_nibble_G101
000117 81e8          ld    r30,y
000118 95e2          swap  r30
000119 83e8          st    y,r30
00011a 81a8      	LD   R26,Y
00011b dfe3      	RCALL __lcd_write_nibble_G101
                +
00011c e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00011d 958a     +DEC R24
00011e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00011f 9621      	ADIW R28,1
000120 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000121 931a      	ST   -Y,R17
000122 930a      	ST   -Y,R16
000123 2f1a      	MOV  R17,R26
000124 810a      	LDD  R16,Y+2
000125 2fe1      	MOV  R30,R17
000126 e0f0      	LDI  R31,0
000127 59e9      	SUBI R30,LOW(-__base_y_G101)
000128 4ffd      	SBCI R31,HIGH(-__base_y_G101)
000129 81e0      	LD   R30,Z
00012a 0fe0      	ADD  R30,R16
00012b 2fae      	MOV  R26,R30
00012c dfe7      	RCALL __lcd_write_data
00012d 2e70      	MOV  R7,R16
00012e 2e61      	MOV  R6,R17
00012f 8119      	LDD  R17,Y+1
000130 8108      	LDD  R16,Y+0
000131 9623      	ADIW R28,3
000132 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000133 e0a2      	LDI  R26,LOW(2)
000134 940e 0199 	CALL SUBOPT_0x1
000136 e0ac      	LDI  R26,LOW(12)
000137 dfdc      	RCALL __lcd_write_data
000138 e0a1      	LDI  R26,LOW(1)
000139 940e 0199 	CALL SUBOPT_0x1
00013b e0e0      	LDI  R30,LOW(0)
00013c 2e6e      	MOV  R6,R30
00013d 2e7e      	MOV  R7,R30
00013e 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00013f 931a      	ST   -Y,R17
000140 2f1a      	MOV  R17,R26
000141 301a      	CPI  R17,10
000142 f011      	BREQ _0x2020005
000143 1479      	CP   R7,R9
000144 f040      	BRLO _0x2020004
                 _0x2020005:
000145 e0e0      	LDI  R30,LOW(0)
000146 93ea      	ST   -Y,R30
000147 9463      	INC  R6
000148 2da6      	MOV  R26,R6
000149 dfd7      	RCALL _lcd_gotoxy
00014a 301a      	CPI  R17,10
00014b f409      	BRNE _0x2020007
00014c c044      	RJMP _0x20C0001
                 _0x2020007:
                 _0x2020004:
00014d 9473      	INC  R7
00014e 9aa8      	SBI  0x15,0
00014f 2fa1      	MOV  R26,R17
000150 dfc3      	RCALL __lcd_write_data
000151 98a8      	CBI  0x15,0
000152 c03e      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000153 940e 01a7 	CALL __SAVELOCR4
000155 019d      	MOVW R18,R26
                 _0x2020008:
000156 01d9      	MOVW R26,R18
                +
000157 5f2f     +SUBI R18 , LOW ( - 1 )
000158 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000159 91ec      	LD   R30,X
00015a 2f1e      	MOV  R17,R30
00015b 30e0      	CPI  R30,0
00015c f019      	BREQ _0x202000A
00015d 2fa1      	MOV  R26,R17
00015e dfe0      	RCALL _lcd_putchar
00015f cff6      	RJMP _0x2020008
                 _0x202000A:
000160 940e 01ac 	CALL __LOADLOCR4
000162 9624      	ADIW R28,4
000163 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000164 931a      	ST   -Y,R17
000165 2f1a      	MOV  R17,R26
000166 b3e4      	IN   R30,0x14
000167 6fe0      	ORI  R30,LOW(0xF0)
000168 bbe4      	OUT  0x14,R30
000169 9aa2      	SBI  0x14,2
00016a 9aa0      	SBI  0x14,0
00016b 9aa1      	SBI  0x14,1
00016c 98aa      	CBI  0x15,2
00016d 98a8      	CBI  0x15,0
00016e 98a9      	CBI  0x15,1
00016f 2e91      	MOV  R9,R17
000170 2fe1      	MOV  R30,R17
000171 58e0      	SUBI R30,-LOW(128)
                +
000172 93e0 0269+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000174 2fe1      	MOV  R30,R17
000175 54e0      	SUBI R30,-LOW(192)
                +
000176 93e0 026a+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000178 e1a4      	LDI  R26,LOW(20)
000179 e0b0      	LDI  R27,0
00017a 940e 01b1 	CALL _delay_ms
00017c 940e 019f 	CALL SUBOPT_0x2
00017e 940e 019f 	CALL SUBOPT_0x2
000180 940e 019f 	CALL SUBOPT_0x2
000182 e2a0      	LDI  R26,LOW(32)
000183 df7b      	RCALL __lcd_write_nibble_G101
                +
000184 ec88     +LDI R24 , LOW ( 200 )
000185 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000186 9701     +SBIW R24 , 1
000187 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000188 e2a8      	LDI  R26,LOW(40)
000189 df8a      	RCALL __lcd_write_data
00018a e0a4      	LDI  R26,LOW(4)
00018b df88      	RCALL __lcd_write_data
00018c e8a5      	LDI  R26,LOW(133)
00018d df86      	RCALL __lcd_write_data
00018e e0a6      	LDI  R26,LOW(6)
00018f df84      	RCALL __lcd_write_data
000190 dfa2      	RCALL _lcd_clear
                 _0x20C0001:
000191 9119      	LD   R17,Y+
000192 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.DSEG
                 __seed_G100:
000263           	.BYTE 0x4
                 __base_y_G101:
000267           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000193 93ea      	ST   -Y,R30
000194 b7ef      	IN   R30,SREG
000195 93ea      	ST   -Y,R30
000196 e0e1      	LDI  R30,LOW(1)
000197 15e4      	CP   R30,R4
000198 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000199 940e 0114 	CALL __lcd_write_data
00019b e0a3      	LDI  R26,LOW(3)
00019c e0b0      	LDI  R27,0
00019d 940c 01b1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
00019f e3a0      	LDI  R26,LOW(48)
0001a0 940e 00ff 	CALL __lcd_write_nibble_G101
                +
0001a2 ec88     +LDI R24 , LOW ( 200 )
0001a3 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001a4 9701     +SBIW R24 , 1
0001a5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001a6 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
0001a7 933a      	ST   -Y,R19
                 __SAVELOCR3:
0001a8 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001a9 931a      	ST   -Y,R17
0001aa 930a      	ST   -Y,R16
0001ab 9508      	RET
                 
                 __LOADLOCR4:
0001ac 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0001ad 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001ae 8119      	LDD  R17,Y+1
0001af 8108      	LD   R16,Y
0001b0 9508      	RET
                 
                 _delay_ms:
0001b1 9610      	adiw r26,0
0001b2 f039      	breq __delay_ms1
                 __delay_ms0:
0001b3 95a8      	wdr
                +
0001b4 ed80     +LDI R24 , LOW ( 0x7D0 )
0001b5 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001b6 9701     +SBIW R24 , 1
0001b7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001b8 9711      	sbiw r26,1
0001b9 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001ba 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   3 r5 :   5 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   7 r17:  23 r18:   5 r19:   3 r20:   0 r21:   0 r22:  12 r23:   0 
r24:  27 r25:  10 r26:  39 r27:  10 r28:   6 r29:   1 r30:  98 r31:  12 
x  :   7 y  :  42 z  :   8 
Registers used: 23 out of 35 (65.7%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   2 
adiw  :   7 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  17 brpl  :   1 brsh  :   0 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  19 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   3 cpc   :   1 cpi   :   3 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   4 jmp   :  23 ld    :  14 ldd   :   9 ldi   :  65 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  22 movw  :   5 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   2 out   :  23 pop   :   0 push  :   0 rcall :  18 ret   :  13 
reti  :   1 rjmp  :  12 rol   :   0 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   6 sbic  :   0 sbis  :   0 sbiw  :   8 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   1 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  26 std   :   1 sts   :   2 sub   :   2 subi  :   5 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 50 out of 116 (43.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000376    822     64    886   32768   2.7%
[.dseg] 0x000060 0x00026b      0     11     11    2048   0.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 8 warnings
